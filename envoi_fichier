import urllib.request
import zipfile
import os
import ftplib
import ssl

# Variables pour le téléchargement (depuis VM1)
server_ip = 'http://192.168.1.100'  # IP de la VM contenant le fichier ZIP (VM1)
file_path = 'test100.sql.zip'
file_url = f'{server_ip}/{file_path}'  # URL pour télécharger le fichier

# Obtenir le répertoire actuel du projet
current_dir = os.path.dirname(os.path.abspath(__file__))  # Chemin du script exécuté
local_filename = os.path.join(current_dir, 'test100.sql.telechargement.zip')  # Fichier local pour le ZIP
extraction_directory = os.path.join(current_dir, 'extracted_files')  # Dossier où extraire les fichiers

# Informations du serveur FTPS (VM2)
ftps_host = '192.168.1.101'  # IP du serveur FTPS (VM2)
ftps_port = 21  # Port du serveur FTPS
remote_directory = '/srv/ftp/dossier_partage'  # Répertoire distant sur la VM2
remote_filename = 'test100.sql.telechargement.zip'  # Nom du fichier distant à enregistrer sur la VM2


# Fonction pour télécharger le fichier ZIP depuis VM1
def download_file(url, local_filename):
    try:
        urllib.request.urlretrieve(url, local_filename)
        print(f"Fichier téléchargé et enregistré sous {local_filename}")
    except Exception as e:
        print(f"Une erreur s'est produite lors du téléchargement : {e}")

# Fonction pour décompresser le fichier ZIP (facultatif si tu veux décompresser localement)
def unzip_file(zip_file_path, extraction_directory):
    try:
        if not os.path.exists(extraction_directory):
            os.makedirs(extraction_directory)
        
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(extraction_directory)
        print(f"Fichiers extraits dans le dossier : {extraction_directory}")
    except Exception as e:
        print(f"Une erreur s'est produite lors de l'extraction : {e}")

# Fonction pour envoyer un fichier sur un serveur FTPS (VM2)
def upload_file_to_ftps(local_file_path, remote_file_name):
    try:
        # Configuration du contexte SSL pour ignorer la vérification des certificats
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE

        # Connexion au serveur FTPS (VM2)
        with ftplib.FTP_TLS(context=context) as ftps:
            ftps.connect(ftps_host, ftps_port)
            print(f"Connecté au serveur FTPS {ftps_host} sur le port {ftps_port}")

            # Connexion avec nom d'utilisateur et mot de passe
            ftps.login('tse', 'tse')
            print("Connexion réussie.")

            # Passage en mode sécurisé
            ftps.prot_p()

            # Changer de répertoire distant
            ftps.cwd(remote_directory)
            print(f"Répertoire distant : {remote_directory}")

            # Transférer le fichier vers la VM2
            with open(local_file_path, 'rb') as f:
                ftps.storbinary(f'STOR {remote_file_name}', f)
            print(f"Fichier {remote_file_name} envoyé avec succès vers le serveur FTPS.")

    except ftplib.all_errors as e:
       print(f"Une erreur s'est produite lors de l'envoi du fichier : {e}")

# Exécution du script
if __name__ == '__main__':
    # Étape 1 : Téléchargers le fichier ZIP depuis VM1
    download_file(file_url, local_filename)
    
    # Étape 2 (facultative) : Décompresser le fichier localement si nécessaire
    unzip_file(local_filename, extraction_directory)
    
    # Étape 3 : Envoyer le fichier ZIP téléchargé vers VM2 via FTPS
    upload_file_to_ftps(local_filename, remote_filename)
